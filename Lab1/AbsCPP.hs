

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun SetType ScopeName [Arg] FunRest
    | DFun1 SetType ScopeName [Arg] FunRest
    | DUs SetType
    | DTypeDef SetType Id
    | DDecl SetType [ScopeName]
    | DInit SetType ScopeName Exp
    | DStruct ScopeName [StructDecl]
  deriving (Eq, Ord, Show, Read)

data FunRest = DFunRest Stm | DFunRest2
  deriving (Eq, Ord, Show, Read)

data StructDecl = StructDecl SetType Id
  deriving (Eq, Ord, Show, Read)

data Arg
    = Arg1 SetType
    | Arg2 SetType ScopeName
    | Arg3 SetType ScopeName Lit
    | Arg4 SetType ScopeName Id
  deriving (Eq, Ord, Show, Read)

data SetType = SetType TypeName | SetTypeCT TypeName
  deriving (Eq, Ord, Show, Read)

data TypeName = TypeName TypeId | TypeName1 TypeId
  deriving (Eq, Ord, Show, Read)

data TypeId = TypeId Type | TypeId1 ScopeName
  deriving (Eq, Ord, Show, Read)

data ScopeName = ScopeName [ScopeNamePart]
  deriving (Eq, Ord, Show, Read)

data ScopeNamePart = ScopeNamePart [ScopePart] TemplPart
  deriving (Eq, Ord, Show, Read)

data ScopePart = ScopePart Id
  deriving (Eq, Ord, Show, Read)

data TemplPart = TemplPart TemplIns | TemplPart2
  deriving (Eq, Ord, Show, Read)

data TemplIns = TemplIns Type | TemplIns1 [ScopeParts]
  deriving (Eq, Ord, Show, Read)

data ScopeParts = ScopeParts [ScopeNamePart]
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SBlock [Stm]
    | SExpI Exp
    | SDecl SetType [ScopeName]
    | SInit SetType ScopeName Exp
    | STypeDef ScopeName [ScopeName]
    | SStruct ScopeName [StructDecl]
    | SReturn Exp
    | SStmIns [Stm]
    | SWhile Exp WhileRest
    | SDo Stm Exp
    | SIf Exp Stm IfRest
    | SForF TypeName Exp Exp Exp ForRest
  deriving (Eq, Ord, Show, Read)

data WhileRest = WhileR1 | WhileR2 Stm
  deriving (Eq, Ord, Show, Read)

data IfRest = IfRest Stm | IfRest1
  deriving (Eq, Ord, Show, Read)

data ForRest = ForRest Stm | ForRest1
  deriving (Eq, Ord, Show, Read)

data AppArg = AppArg Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EStr Lit
    | EId ScopeName
    | EApp ScopeName [AppArg]
    | EInd ScopeName Exp
    | EPIncr Exp
    | EPDecr Exp
    | EDot Exp Exp
    | EArrow Exp Exp
    | EIncr Exp
    | EDecr Exp
    | EExcl Exp
    | EPnt Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | EBLsh Exp Exp
    | EBRsh Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtWq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAssPl Exp Exp
    | EAssMin Exp Exp
    | ECondAss Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)

data Type = TypeBool | TypeInt | TypeDouble | TypeVoid
  deriving (Eq, Ord, Show, Read)

data Lit
    = LitString [String]
    | LitInteger Integer
    | LitDouble Double
    | LitChar Char
    | LitTrue
    | LitFalse
  deriving (Eq, Ord, Show, Read)

