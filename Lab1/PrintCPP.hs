{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintCPP where

-- pretty-printer generated by the BNF converter

import AbsCPP
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DFun settype scopename args funrest -> prPrec i 0 (concatD [doc (showString "inline"), prt 0 settype, prt 0 scopename, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 funrest])
    DFun1 settype scopename args funrest -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopename, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 funrest])
    DUs settype -> prPrec i 0 (concatD [doc (showString "using"), prt 0 settype, doc (showString ";")])
    DTypeDef settype id -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 settype, prt 0 id, doc (showString ";")])
    DDecl settype scopenames -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopenames, doc (showString ";")])
    DInit settype scopename exp -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopename, doc (showString "="), prt 0 exp, doc (showString ";")])
    DStruct scopename structdecls -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 scopename, doc (showString "{"), prt 0 structdecls, doc (showString "}"), doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print FunRest where
  prt i e = case e of
    DFunRest stm -> prPrec i 0 (concatD [prt 0 stm])
    DFunRest2 -> prPrec i 0 (concatD [doc (showString ";")])

instance Print StructDecl where
  prt i e = case e of
    StructDecl settype id -> prPrec i 0 (concatD [prt 0 settype, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Arg where
  prt i e = case e of
    Arg1 settype -> prPrec i 0 (concatD [prt 0 settype])
    Arg2 settype scopename -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopename])
    Arg3 settype scopename lit -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopename, doc (showString "="), prt 0 lit])
    Arg4 settype scopename id -> prPrec i 0 (concatD [prt 0 settype, prt 0 scopename, doc (showString "="), prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print SetType where
  prt i e = case e of
    SetType typename -> prPrec i 0 (concatD [prt 0 typename])
    SetTypeCT typename -> prPrec i 0 (concatD [doc (showString "const"), prt 0 typename])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeName where
  prt i e = case e of
    TypeName typeid -> prPrec i 0 (concatD [prt 0 typeid])
    TypeName1 typeid -> prPrec i 0 (concatD [prt 0 typeid, doc (showString "&")])

instance Print TypeId where
  prt i e = case e of
    TypeId type_ -> prPrec i 0 (concatD [prt 0 type_])
    TypeId1 scopename -> prPrec i 0 (concatD [prt 0 scopename])

instance Print ScopeName where
  prt i e = case e of
    ScopeName scopenameparts -> prPrec i 0 (concatD [prt 0 scopenameparts])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ScopeNamePart where
  prt i e = case e of
    ScopeNamePart scopeparts templpart -> prPrec i 0 (concatD [prt 0 scopeparts, prt 0 templpart])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "::"), prt 0 xs])
instance Print ScopePart where
  prt i e = case e of
    ScopePart id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "::"), prt 0 xs])
instance Print TemplPart where
  prt i e = case e of
    TemplPart templins -> prPrec i 0 (concatD [doc (showString "<"), prt 0 templins, doc (showString ">")])
    TemplPart2 -> prPrec i 0 (concatD [])

instance Print TemplIns where
  prt i e = case e of
    TemplIns type_ -> prPrec i 0 (concatD [prt 0 type_])
    TemplIns1 scopepartss -> prPrec i 0 (concatD [prt 0 scopepartss])

instance Print ScopeParts where
  prt i e = case e of
    ScopeParts scopenameparts -> prPrec i 0 (concatD [prt 0 scopenameparts])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 1 stms, doc (showString "}")])
    SExpI exp -> prPrec i 1 (concatD [prt 0 exp, doc (showString ";")])
    SDecl settype scopenames -> prPrec i 1 (concatD [prt 0 settype, prt 0 scopenames, doc (showString ";")])
    SInit settype scopename exp -> prPrec i 1 (concatD [prt 0 settype, prt 0 scopename, doc (showString "="), prt 0 exp, doc (showString ";")])
    STypeDef scopename scopenames -> prPrec i 1 (concatD [doc (showString "typedef"), prt 0 scopename, prt 0 scopenames, doc (showString ";")])
    SStruct scopename structdecls -> prPrec i 1 (concatD [doc (showString "struct"), prt 0 scopename, doc (showString "{"), prt 0 structdecls, doc (showString "}"), doc (showString ";")])
    SReturn exp -> prPrec i 1 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    SStmIns stms -> prPrec i 1 (concatD [doc (showString "{"), prt 1 stms, doc (showString "}")])
    SWhile exp whilerest -> prPrec i 1 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 whilerest])
    SDo stm exp -> prPrec i 1 (concatD [doc (showString "do"), prt 1 stm, doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString ";")])
    SIf exp stm ifrest -> prPrec i 1 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 1 stm, prt 0 ifrest])
    SForF typename exp1 exp2 exp3 forrest -> prPrec i 1 (concatD [doc (showString "for"), doc (showString "("), prt 0 typename, prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ";"), prt 0 exp3, doc (showString ")"), prt 0 forrest])
  prtList 1 [] = (concatD [])
  prtList 1 (x:xs) = (concatD [prt 1 x, prt 1 xs])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print WhileRest where
  prt i e = case e of
    WhileR1 -> prPrec i 0 (concatD [doc (showString ";")])
    WhileR2 stm -> prPrec i 0 (concatD [prt 1 stm])

instance Print IfRest where
  prt i e = case e of
    IfRest stm -> prPrec i 0 (concatD [doc (showString "else"), prt 1 stm])
    IfRest1 -> prPrec i 0 (concatD [])

instance Print ForRest where
  prt i e = case e of
    ForRest stm -> prPrec i 0 (concatD [prt 0 stm])
    ForRest1 -> prPrec i 0 (concatD [doc (showString ";")])

instance Print AppArg where
  prt i e = case e of
    AppArg exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EStr lit -> prPrec i 16 (concatD [prt 0 lit])
    EId scopename -> prPrec i 16 (concatD [prt 0 scopename])
    EApp scopename appargs -> prPrec i 15 (concatD [prt 0 scopename, doc (showString "("), prt 0 appargs, doc (showString ")")])
    EInd scopename exp -> prPrec i 15 (concatD [prt 0 scopename, doc (showString "["), prt 0 exp, doc (showString "]")])
    EPIncr exp -> prPrec i 14 (concatD [prt 15 exp, doc (showString "++")])
    EPDecr exp -> prPrec i 14 (concatD [prt 15 exp, doc (showString "--")])
    EDot exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "."), prt 15 exp2])
    EArrow exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "->"), prt 15 exp2])
    EIncr exp -> prPrec i 13 (concatD [doc (showString "++"), prt 14 exp])
    EDecr exp -> prPrec i 13 (concatD [doc (showString "--"), prt 14 exp])
    EExcl exp -> prPrec i 13 (concatD [doc (showString "!"), prt 14 exp])
    EPnt exp -> prPrec i 13 (concatD [doc (showString "*"), prt 14 exp])
    ETimes exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    EPlus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    EMinus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    EBLsh exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    EBRsh exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    ELt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    EGt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    ELtEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    EGtWq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    EEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    ENEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    EAnd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    EOr exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    EAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "="), prt 2 exp2])
    EAssPl exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "-="), prt 2 exp2])
    EAssMin exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "+="), prt 2 exp2])
    ECondAss exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 2 exp2, doc (showString ":"), prt 1 exp3])
    EThrow exp -> prPrec i 1 (concatD [doc (showString "throw"), prt 2 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    TypeBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TypeInt -> prPrec i 0 (concatD [doc (showString "int")])
    TypeDouble -> prPrec i 0 (concatD [doc (showString "double")])
    TypeVoid -> prPrec i 0 (concatD [doc (showString "void")])

instance Print Lit where
  prt i e = case e of
    LitString strs -> prPrec i 0 (concatD [prt 0 strs])
    LitInteger n -> prPrec i 0 (concatD [prt 0 n])
    LitDouble d -> prPrec i 0 (concatD [prt 0 d])
    LitChar c -> prPrec i 0 (concatD [prt 0 c])
    LitTrue -> prPrec i 0 (concatD [doc (showString "true")])
    LitFalse -> prPrec i 0 (concatD [doc (showString "false")])


